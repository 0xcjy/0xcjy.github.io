import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as i,e as m,b as p,d as t,w as l,r as e,o as c,f as h}from"./app-D6x_2015.js";const d={};function g(x,a){const n=e("RouteLink"),s=e("Catalog");return c(),r("div",null,[i(" more "),a[1]||(a[1]=m('<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>字符串算法关注匹配、存储与变换。KMP 算法通过部分匹配表实现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 模式匹配，扩展应用包括循环节判定。Trie 树组织字符串集合以支持前缀检索，而 AC 自动机结合 Trie 与 KMP 处理多模式匹配（敏感词过滤）。后缀数组（SA）通过倍增法构建，用于最长重复子串等子串问题。哈希技术（滚动哈希、双哈希）可快速比较子串相似性。回文相关算法（Manacher 算法求最长回文子串）和序列自动机（子序列存在性判断）也是常见考点。近年来，后缀自动机（SAM）因能高效处理复杂子串问题备受关注。</p>',3)),p("p",null,[t(n,{to:"/oi/"},{default:l(()=>a[0]||(a[0]=[h("回到总目录")])),_:1,__:[0]})]),t(s)])}const y=o(d,[["render",g]]),M=JSON.parse('{"path":"/oi/string/","title":"字符串","lang":"zh-CN","frontmatter":{"date":"2025-05-01T00:00:00.000Z","dir":[{"order":8}],"index":false,"editLink":false,"comment":false,"contributors":false,"description":"字符串 介绍 字符串算法关注匹配、存储与变换。KMP 算法通过部分匹配表实现 O(n) 模式匹配，扩展应用包括循环节判定。Trie 树组织字符串集合以支持前缀检索，而 AC 自动机结合 Trie 与 KMP 处理多模式匹配（敏感词过滤）。后缀数组（SA）通过倍增法构建，用于最长重复子串等子串问题。哈希技术（滚动哈希、双哈希）可快速比较子串相似性。回文相...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CJY\\",\\"url\\":\\"https://0xcjy.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://0xcjy.github.io/oi/string/"}],["meta",{"property":"og:site_name","content":"CJY的博客"}],["meta",{"property":"og:title","content":"字符串"}],["meta",{"property":"og:description","content":"字符串 介绍 字符串算法关注匹配、存储与变换。KMP 算法通过部分匹配表实现 O(n) 模式匹配，扩展应用包括循环节判定。Trie 树组织字符串集合以支持前缀检索，而 AC 自动机结合 Trie 与 KMP 处理多模式匹配（敏感词过滤）。后缀数组（SA）通过倍增法构建，用于最长重复子串等子串问题。哈希技术（滚动哈希、双哈希）可快速比较子串相似性。回文相..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-05-01T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"oi/string/README.md","excerpt":"<!-- more -->\\n<h1>字符串</h1>\\n<h2>介绍</h2>\\n<p>字符串算法关注匹配、存储与变换。KMP 算法通过部分匹配表实现 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span> 模式匹配，扩展应用包括循环节判定。Trie 树组织字符串集合以支持前缀检索，而 AC 自动机结合 Trie 与 KMP 处理多模式匹配（敏感词过滤）。后缀数组（SA）通过倍增法构建，用于最长重复子串等子串问题。哈希技术（滚动哈希、双哈希）可快速比较子串相似性。回文相关算法（Manacher 算法求最长回文子串）和序列自动机（子序列存在性判断）也是常见考点。近年来，后缀自动机（SAM）因能高效处理复杂子串问题备受关注。</p>","autoDesc":true}');export{y as comp,M as data};
