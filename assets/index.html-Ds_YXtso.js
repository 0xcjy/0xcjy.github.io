import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,e as m,b as r,d as t,w as l,r as s,o as c,f as h}from"./app-D6x_2015.js";const d={};function x(w,a){const n=s("RouteLink"),e=s("Catalog");return c(),o("div",null,[i(" more "),a[1]||(a[1]=m('<h1 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>动态规划通过将问题分解为重叠子问题并记录中间结果避免重复计算，分为自顶向下（记忆化搜索）和自底向上（递推填表）两种模式。经典模型包括背包问题（01背包、完全背包）、最长公共子序列（LCS）和区间 DP（矩阵链乘法）。其核心在于设计状态转移方程，例如在编辑距离问题中定义 <code>dp[i][j]</code> 表示字符串 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 位到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 位的操作次数。优化手段包括滚动数组降维、斜率优化（单调队列）和四边形不等式。树形 DP（如求树的最大独立集）和状压 DP（如旅行商问题）进一步扩展了应用场景，需结合问题特性灵活设计状态。</p>',3)),r("p",null,[t(n,{to:"/oi/"},{default:l(()=>a[0]||(a[0]=[h("回到总目录")])),_:1,__:[0]})]),t(e)])}const k=p(d,[["render",x]]),M=JSON.parse('{"path":"/oi/dp/","title":"动态规划","lang":"zh-CN","frontmatter":{"date":"2025-05-01T00:00:00.000Z","dir":[{"order":3}],"index":false,"editLink":false,"comment":false,"contributors":false,"description":"动态规划 介绍 动态规划通过将问题分解为重叠子问题并记录中间结果避免重复计算，分为自顶向下（记忆化搜索）和自底向上（递推填表）两种模式。经典模型包括背包问题（01背包、完全背包）、最长公共子序列（LCS）和区间 DP（矩阵链乘法）。其核心在于设计状态转移方程，例如在编辑距离问题中定义 dp[i][j] 表示字符串 A 前 i 位到 B 前 j 位的操作...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态规划\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CJY\\",\\"url\\":\\"https://0xcjy.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://0xcjy.github.io/oi/dp/"}],["meta",{"property":"og:site_name","content":"CJY的博客"}],["meta",{"property":"og:title","content":"动态规划"}],["meta",{"property":"og:description","content":"动态规划 介绍 动态规划通过将问题分解为重叠子问题并记录中间结果避免重复计算，分为自顶向下（记忆化搜索）和自底向上（递推填表）两种模式。经典模型包括背包问题（01背包、完全背包）、最长公共子序列（LCS）和区间 DP（矩阵链乘法）。其核心在于设计状态转移方程，例如在编辑距离问题中定义 dp[i][j] 表示字符串 A 前 i 位到 B 前 j 位的操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-05-01T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":1.06,"words":318},"filePathRelative":"oi/dp/README.md","excerpt":"<!-- more -->\\n<h1>动态规划</h1>\\n<h2>介绍</h2>\\n<p>动态规划通过将问题分解为重叠子问题并记录中间结果避免重复计算，分为自顶向下（记忆化搜索）和自底向上（递推填表）两种模式。经典模型包括背包问题（01背包、完全背包）、最长公共子序列（LCS）和区间 DP（矩阵链乘法）。其核心在于设计状态转移方程，例如在编辑距离问题中定义 <code>dp[i][j]</code> 表示字符串 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\"application/x-tex\\">A</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\">A</span></span></span></span> 前 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\"application/x-tex\\">i</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6595em;\\"></span><span class=\\"mord mathnormal\\">i</span></span></span></span> 位到 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\"application/x-tex\\">B</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05017em;\\">B</span></span></span></span> 前 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\"application/x-tex\\">j</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.854em;vertical-align:-0.1944em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05724em;\\">j</span></span></span></span> 位的操作次数。优化手段包括滚动数组降维、斜率优化（单调队列）和四边形不等式。树形 DP（如求树的最大独立集）和状压 DP（如旅行商问题）进一步扩展了应用场景，需结合问题特性灵活设计状态。</p>","autoDesc":true}');export{k as comp,M as data};
