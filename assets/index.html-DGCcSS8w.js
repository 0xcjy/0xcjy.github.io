import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as p,e as i,b as m,d as t,w as l,r as e,o as c,f as h}from"./app-D6x_2015.js";const d={};function g(u,a){const s=e("RouteLink"),n=e("Catalog");return c(),r("div",null,[p(" more "),a[1]||(a[1]=i('<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>数据结构是算法实现的基石，分为线性（数组、链表）、树形（二叉树、堆）和哈希结构三大类。栈（后进先出）和队列（先进先出）支撑 DFS/BFS 等算法；堆（优先队列）支持快速极值查询，用于 Dijkstra 算法；并查集解决集合合并与连通性问题（如 Kruskal 算法）。高级结构如树状数组（单点更新区间求和）和线段树（区间修改查询）优化了区间操作效率。哈希表通过散列函数实现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 查询，但需处理冲突（开放寻址法或链地址法）。数据结构的组合与变形（如跳跃表、块状链表）常成为解题关键。</p>',3)),m("p",null,[t(s,{to:"/oi/"},{default:l(()=>a[0]||(a[0]=[h("回到总目录")])),_:1,__:[0]})]),t(n)])}const y=o(d,[["render",g]]),k=JSON.parse('{"path":"/oi/data/","title":"数据结构","lang":"zh-CN","frontmatter":{"date":"2025-05-01T00:00:00.000Z","dir":[{"order":4}],"index":false,"editLink":false,"comment":false,"contributors":false,"description":"数据结构 介绍 数据结构是算法实现的基石，分为线性（数组、链表）、树形（二叉树、堆）和哈希结构三大类。栈（后进先出）和队列（先进先出）支撑 DFS/BFS 等算法；堆（优先队列）支持快速极值查询，用于 Dijkstra 算法；并查集解决集合合并与连通性问题（如 Kruskal 算法）。高级结构如树状数组（单点更新区间求和）和线段树（区间修改查询）优化了...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CJY\\",\\"url\\":\\"https://0xcjy.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://0xcjy.github.io/oi/data/"}],["meta",{"property":"og:site_name","content":"CJY的博客"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构 介绍 数据结构是算法实现的基石，分为线性（数组、链表）、树形（二叉树、堆）和哈希结构三大类。栈（后进先出）和队列（先进先出）支撑 DFS/BFS 等算法；堆（优先队列）支持快速极值查询，用于 Dijkstra 算法；并查集解决集合合并与连通性问题（如 Kruskal 算法）。高级结构如树状数组（单点更新区间求和）和线段树（区间修改查询）优化了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-05-01T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":0.97,"words":292},"filePathRelative":"oi/data/README.md","excerpt":"<!-- more -->\\n<h1>数据结构</h1>\\n<h2>介绍</h2>\\n<p>数据结构是算法实现的基石，分为线性（数组、链表）、树形（二叉树、堆）和哈希结构三大类。栈（后进先出）和队列（先进先出）支撑 DFS/BFS 等算法；堆（优先队列）支持快速极值查询，用于 Dijkstra 算法；并查集解决集合合并与连通性问题（如 Kruskal 算法）。高级结构如树状数组（单点更新区间求和）和线段树（区间修改查询）优化了区间操作效率。哈希表通过散列函数实现 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mn>1</mn><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(1)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">1</span><span class=\\"mclose\\">)</span></span></span></span> 查询，但需处理冲突（开放寻址法或链地址法）。数据结构的组合与变形（如跳跃表、块状链表）常成为解题关键。</p>","autoDesc":true}');export{y as comp,k as data};
